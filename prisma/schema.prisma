// prisma/schema.prisma - Add Client model
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("trainer")
  accounts      Account[]
  sessions      Session[]
  trainer       Trainer?
}

model Trainer {
  id               String        @id @default(cuid())
  userId           String        @unique
  bookingSlug      String        @unique
  googleCalendarId String?
  workingHours     String?       // JSON string
  timezone         String        @default("Asia/Jerusalem")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  clients          Client[]      // New relationship
}

// New Client model
model Client {
  id               String        @id @default(cuid())
  trainerId        String
  email            String        // Primary identifier
  name             String
  phone            String?
  
  // Enhanced profile information
  notes            String?       // Trainer's notes about the client
  goals            String?       // Fitness goals
  medicalNotes     String?       // Medical conditions/restrictions
  emergencyContact String?       // Emergency contact info
  birthDate        DateTime?     // Age calculation
  joinedDate       DateTime      @default(now())
  lastSessionDate  DateTime?     // Auto-updated from appointments
  
  // Preferences
  preferredDays    String?       // JSON array of preferred days
  preferredTimes   String?       // JSON array of preferred time slots
  sessionDuration  Int?          // Preferred session length in minutes
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relationships
  trainer          Trainer       @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  
  @@unique([trainerId, email]) // Unique client per trainer
}

model Appointment {
  id              String   @id @default(cuid())
  trainerId       String
  clientId        String?  // New: Link to Client model
  clientName      String
  clientEmail     String
  clientPhone     String?
  datetime        DateTime
  duration        Int      @default(60) // minutes
  status          String   @default("booked") // booked, cancelled, completed
  googleEventId   String?
  sessionNotes    String?  // New: Post-session notes
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  trainer         Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  client          Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
}