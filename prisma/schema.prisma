generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("trainer")
  password      String?
  accounts      Account[]
  sessions      Session[]
  trainer       Trainer?
}

model Trainer {
  id               String        @id @default(cuid())
  userId           String        @unique
  bookingSlug      String        @unique
  googleCalendarId String?
  workingHours     String?
  timezone         String        @default("Asia/Jerusalem")
  phone            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  appointments     Appointment[]
  clients          Client[]
  payments         Payment[]
  smsLogs          SmsLog[]
  telegramUsers    TelegramUser[]
  telegramConversations TelegramConversation[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id               String        @id @default(cuid())
  trainerId        String
  email            String
  name             String
  phone            String?
  notes            String?
  goals            String?
  medicalNotes     String?
  emergencyContact String?
  birthDate        DateTime?
  joinedDate       DateTime      @default(now())
  lastSessionDate  DateTime?
  completedSessions Int          @default(0)
  preferredDays    String?
  preferredTimes   String?
  sessionDuration  Int?
  sessionPrice     Int           @default(180)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  nutritionPlan    String?
  appointments     Appointment[]
  trainer          Trainer       @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  measurements     Measurement[]
  payments         Payment[]
  telegramUsers    TelegramUser[]

  @@unique([trainerId, email])
}

model Appointment {
  id            String    @id @default(cuid())
  trainerId     String
  clientId      String?
  clientName    String
  clientEmail   String
  clientPhone   String?
  datetime      DateTime
  duration      Int       @default(60)
  status        String    @default("booked")
  googleEventId String?
  sessionNotes  String?
  sessionPrice  Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  client        Client?   @relation(fields: [clientId], references: [id])
  trainer       Trainer   @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  payments      Payment[]
  smsLogs       SmsLog[]
}

model Payment {
  id            String       @id @default(cuid())
  trainerId     String
  clientId      String
  appointmentId String?
  amount        Int
  paymentDate   DateTime     @default(now())
  paymentMethod String       @default("cash")
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer       Trainer      @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model Measurement {
  id        String   @id @default(cuid())
  clientId  String
  date      DateTime @default(now())
  weight    Float?
  chest     Float?
  waist     Float?
  hips      Float?
  arms      Float?
  thighs    Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model SmsLog {
  id            String      @id @default(cuid())
  appointmentId String
  trainerId     String
  clientPhone   String
  message       String
  twilioSid     String?
  status        String      @default("sent")
  sentAt        DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  trainer       Trainer     @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model TelegramUser {
  id            String   @id @default(cuid())
  telegramId    BigInt   @unique
  chatId        BigInt   @unique
  username      String?
  firstName     String?
  lastName      String?
  languageCode  String?
  clientId      String?
  trainerId     String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  client        Client?  @relation(fields: [clientId], references: [id])
  trainer       Trainer? @relation(fields: [trainerId], references: [id])
  conversations TelegramConversation[]
}

model TelegramConversation {
  id              String   @id @default(cuid())
  telegramUserId  String
  trainerId       String?
  state           String   @default("active")
  bookingData     Json?
  messageCount    Int      @default(0)
  lastMessageAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  
  telegramUser    TelegramUser @relation(fields: [telegramUserId], references: [id])
  trainer         Trainer? @relation(fields: [trainerId], references: [id])
  
  @@index([telegramUserId, state])
}
